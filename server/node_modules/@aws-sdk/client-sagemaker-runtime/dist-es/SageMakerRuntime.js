import { InvokeEndpointAsyncCommand, } from "./commands/InvokeEndpointAsyncCommand";
import { InvokeEndpointCommand, } from "./commands/InvokeEndpointCommand";
import { SageMakerRuntimeClient } from "./SageMakerRuntimeClient";
export class SageMakerRuntime extends SageMakerRuntimeClient {
    invokeEndpoint(args, optionsOrCb, cb) {
        const command = new InvokeEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    invokeEndpointAsync(args, optionsOrCb, cb) {
        const command = new InvokeEndpointAsyncCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
